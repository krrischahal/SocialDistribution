# Generated by Django 4.2.16 on 2024-11-30 18:16

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('id', models.URLField(blank=True, primary_key=True, serialize=False, unique=True)),
                ('host', models.URLField()),
                ('display_name', models.CharField(max_length=100)),
                ('github', models.URLField(blank=True, null=True)),
                ('profile_image', models.URLField(blank=True, null=True)),
                ('profile_image_file', models.ImageField(blank=True, null=True, upload_to='profile_images/')),
                ('page', models.URLField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_remote', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('page', models.URLField()),
                ('id', models.URLField()),
                ('size', models.PositiveIntegerField(default=5)),
            ],
        ),
        migrations.CreateModel(
            name='Likes',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('page', models.URLField()),
                ('id', models.URLField()),
                ('size', models.PositiveIntegerField(default=5)),
            ],
        ),
        migrations.CreateModel(
            name='LocalVars',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_host', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Local Variables',
            },
        ),
        migrations.CreateModel(
            name='NodeCredential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=255, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='RemoteNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_url', models.URLField(unique=True)),
                ('username', models.CharField(max_length=255)),
                ('password', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Repost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_url', models.URLField()),
                ('published_at', models.DateTimeField(auto_now_add=True)),
                ('reposter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('host', models.URLField()),
                ('author_url', models.URLField(editable=False)),
                ('title', models.CharField(max_length=255)),
                ('id', models.URLField(blank=True, unique=True)),
                ('description', models.TextField()),
                ('content_type', models.CharField(choices=[('text/markdown', 'Markdown'), ('text/plain', 'Plaintext'), ('application/base64', 'Image'), ('image/png;base64', 'PNG'), ('image/jpeg;base64', 'JPEG')], max_length=50)),
                ('content', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='post_images/')),
                ('published_at', models.DateTimeField(auto_now_add=True)),
                ('visibility', models.CharField(choices=[('PUBLIC', 'Public'), ('UNLISTED', 'Unlisted'), ('FRIENDS', 'Friends Only'), ('DELETED', 'Deleted')], max_length=50)),
                ('page', models.URLField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('comments', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='socialnetwork.comments')),
                ('likes', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='socialnetwork.likes')),
            ],
        ),
        migrations.CreateModel(
            name='Inbox',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('activity_type', models.CharField(max_length=50)),
                ('activity_data', models.JSONField()),
                ('received_at', models.DateTimeField(auto_now_add=True)),
                ('is_processed', models.BooleanField(default=False)),
                ('local_author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inbox_items', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('comment', models.TextField()),
                ('content_type', models.CharField(choices=[('text/markdown', 'Markdown'), ('text/plain', 'Plaintext'), ('application/base64', 'Image'), ('image/png;base64', 'PNG'), ('image/jpeg;base64', 'JPEG')], max_length=50)),
                ('published', models.DateTimeField(auto_now_add=True)),
                ('id', models.URLField(blank=True, unique=True)),
                ('post', models.URLField()),
                ('page', models.URLField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('comments', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='socialnetwork.comments')),
                ('likes', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='socialnetwork.likes')),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('published', models.DateTimeField(auto_now_add=True)),
                ('id', models.URLField(blank=True, unique=True)),
                ('object', models.URLField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('likes', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='socialnetwork.likes')),
            ],
            options={
                'unique_together': {('author', 'object')},
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_set', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('follower', 'following')},
            },
        ),
    ]
